name: test_wheel_build
on:
  workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_linux_mac:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    if: >-
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'Build System'))
    runs-on: ${{ matrix.buildplat[0] }}
    timeout-minutes: 50
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
        - [ubuntu-20.04, manylinux_x86_64]
        - [ubuntu-20.04, musllinux_x86_64]
        - [macos-10.15, macosx_*]
        # - [windows-2019, win32]
#        spacy doesn't compile win32
#        python: ["cp37"] # Note: Wheels not needed for PyPy
        python: ["cp36", "cp37", "cp38", "cp39", "cp310","cp311"] # Note: Wheels not needed for PyPy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.1
        env:
          # TODO: Build Cython with the compile-all flag?
          # Unfortunately, there is no way to modify cibuildwheel's build command
          # so there is no way to pass this in directly.
          # This would require modifying cython's setup.py to look for these flags
          # in env vars.
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'

      - name: check build
        run: |
          ls -l wheelhouse

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.python }}-${{ startsWith(matrix.buildplat[1], 'macosx') && 'macosx' || matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl

          
  build_windows:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    if: >-
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'Build System'))
    runs-on: ${{ matrix.buildplat[0] }}
    timeout-minutes: 50
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
        - [windows-2019, win_amd64]
        python-version: 
        - ["3.6", "cp36"]
        - ["3.7", "cp37"]
        - ["3.8", "cp38"]
        - ["3.9", "cp39"]
        - ["3.10", "cp310"]
        - ["3.11", "cp311"]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version[0] }} 
      
      - name: Install dependencies
        run: |
          conda install -c conda-forge libiconv
          python --version
          python -m pip install --upgrade pip
          python -m pip install wheel auditwheel
          python -m pip install --upgrade setuptools wheel auditwheel
          echo ${{ matrix.python-version[0] }}
          echo ${{ matrix.python-version[1] }}

      - name: check env
        run: |
          pwd
          where python
          ls
        
      - name: start build
        env:
          CIBW_BUILD: ${{ matrix.python-version[1] }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'
        run: python setup.py bdist_wheel

      - name: check  build
        run: ls dist

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.python-version[1] }}-${{ matrix.buildplat[1] }}
          path: ./dist/*.whl
          

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout quicksectx
        uses: actions/checkout@v3
      # Used to push the built wheels
      - uses: actions/setup-python@v4
        with:
          # Build sdist on lowest supported Python
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      
      - name: Build sdist
        run: |
          python setup.py sdist
          ls dist


  upload_pypi:
    needs: [build_windows, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          pip install twine

      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: check downloaded
        run: |
          # ls dist
          mv ./dist/**/simstring* ./dist/
          rm -rf dist/cp*
          # rm -rf dist/sdist
          ls -R


